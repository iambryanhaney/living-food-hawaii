class DishSerializer

    def initialize(dish_object)
        @dish = dish_object
    end

    def to_serialized_json
        @dish.to_json(include: {images: {include: {blob: {only: [:key]}}, only: :blob}}, only: [:id, :description, :images])
    end

end



=begin



        If we use Variants

    - Front end needs URLs for each size (thumb, medium, full)
      - These URLS must be generated by Rails before being served via JSON
      - If we send all 3 URLS along with any dish (or collection of dishes), 
        we have to generate thumb and medium variants on the first serve.
    - GET requests go to server first, then redirect to S3
    - Changing variant sizes means changing arguments on the backend .variant calls
      + No setup necessary to filter transform requests
    + All files visible in S3
    +/- All files persistent
    - Variants are checked SERIALLY, with each requiring a roundtrip from server->S3->server
        to check existence, a single server->client for url payload, and finally
        client->server->client->s3->client for the redirect. Your Rails API fetch
        will hang for as long as it takes the variants to check and/or generate, which will
        require React to wait to start rendering layout.






        If we use CloudFront

    + Front end only needs image key and can dynamically request from there
    + GET requests go directly to CloudFront
    + Changing or adding sizes only requires changing the front end request
      - ServerlessImageHandler must be configured to filter transform requests
    - Only the full-size files are visible in S3
    +/- CloudFront schedules variant deletion
    + Variants are checked in parallel by Lambda. Data flow is server->client for base url + image key
      payload, then client->CloudFront for GET request (in parallel), CloudFront->Client if variants
      exists, otherwise CloudFront->Lambda->CloudFront->Client for variant generation. Client receives
      url + key fetch payload immediately and can React can begin rendering. 
      
      















=end